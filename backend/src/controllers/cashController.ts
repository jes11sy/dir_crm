import { Request, Response } from 'express'
import { prisma } from '../lib/prisma'

export const getCashOperations = async (req: Request, res: Response) => {
  try {
    const { page = 1, limit = 10, type, date_from, date_to } = req.query
    
    console.log('üîç –ó–∞–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ü–∏–π –∫–∞—Å—Å—ã:', { page, limit, type, date_from, date_to })
    
    const skip = (Number(page) - 1) * Number(limit)
    
    const where: any = {}
    
    if (type && type !== 'all') {
      where.name = type
    }
    
    if (date_from || date_to) {
      where.dateCreate = {}
      if (date_from) {
        where.dateCreate.gte = new Date(date_from as string)
      }
      if (date_to) {
        where.dateCreate.lte = new Date(date_to as string)
      }
    }

    console.log('üîç –£—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞:', where)

    const [operations, total] = await Promise.all([
      prisma.cash.findMany({
        where,
        skip,
        take: Number(limit),
        orderBy: {
          dateCreate: 'desc'
        }
      }),
      prisma.cash.count({ where })
    ])

    console.log('üìä –ù–∞–π–¥–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π:', operations.length, '–∏–∑', total)

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Decimal –≤ –æ–±—ã—á–Ω—ã–µ —á–∏—Å–ª–∞ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const formattedOperations = operations.map(op => ({
      ...op,
      amount: Number(op.amount)
    }))

    res.json({
      operations: formattedOperations,
      pagination: {
        page: Number(page),
        limit: Number(limit),
        total,
        pages: Math.ceil(total / Number(limit))
      }
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –∫–∞—Å—Å—ã:', error)
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
}

export const getCashOperationById = async (req: Request, res: Response) => {
  try {
    const { id } = req.params

    const operation = await prisma.cash.findUnique({
      where: { id: Number(id) }
    })

    if (!operation) {
      return res.status(404).json({ message: '–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' })
    }

    res.json(operation)
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏:', error)
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
}

export const createCashOperation = async (req: Request, res: Response) => {
  try {
    const { name, amount, note, receiptDoc, receipt_doc, name_create, nameCreate, city, paymentPurpose } = req.body
    
    console.log('üîç –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:', req.body)
    console.log('üîç –ü–æ–ª—è:', { name, amount, note, receiptDoc, receipt_doc, name_create, nameCreate, city, paymentPurpose })

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º nameCreate –µ—Å–ª–∏ name_create –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
    const creatorName = name_create || nameCreate

    if (!name || !amount || !creatorName) {
      return res.status(400).json({ 
        message: '–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏, —Å—É–º–º–∞ –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
      })
    }

    if (name !== '–ø—Ä–∏—Ö–æ–¥' && name !== '—Ä–∞—Å—Ö–æ–¥') {
      return res.status(400).json({ 
        message: '–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "–ø—Ä–∏—Ö–æ–¥" –∏–ª–∏ "—Ä–∞—Å—Ö–æ–¥"' 
      })
    }

    if (amount <= 0) {
      return res.status(400).json({ 
        message: '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0' 
      })
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º receiptDoc –∏–ª–∏ receipt_doc (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    const documentUrl = receiptDoc || receipt_doc

    console.log('üîç –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î —Å –¥–∞–Ω–Ω—ã–º–∏:', {
      name,
      amount,
      note,
      receiptDoc: documentUrl,
      name_create: creatorName,
      city,
      paymentPurpose
    })

    const operation = await prisma.cash.create({
      data: {
        name,
        amount: Number(amount), // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
        note,
        receiptDoc: documentUrl,
        nameCreate: creatorName,
        city,
        paymentPurpose
      }
    })

    console.log('‚úÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', operation)

    res.status(201).json({
      message: '–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞',
      operation
    })
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏:', error)
    console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', (error as Error).message)
    res.status(500).json({ 
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: (error as Error).message 
    })
  }
}

export const updateCashOperation = async (req: Request, res: Response) => {
  try {
    const { id } = req.params
    const updateData = req.body

    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–ª—å–∑—è –æ–±–Ω–æ–≤–ª—è—Ç—å –Ω–∞–ø—Ä—è–º—É—é
    delete updateData.id
    delete updateData.createdAt
    delete updateData.updatedAt

    if (updateData.name && updateData.name !== '–ø—Ä–∏—Ö–æ–¥' && updateData.name !== '—Ä–∞—Å—Ö–æ–¥') {
      return res.status(400).json({ 
        message: '–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "–ø—Ä–∏—Ö–æ–¥" –∏–ª–∏ "—Ä–∞—Å—Ö–æ–¥"' 
      })
    }

    if (updateData.amount && updateData.amount <= 0) {
      return res.status(400).json({ 
        message: '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0' 
      })
    }

    const operation = await prisma.cash.update({
      where: { id: Number(id) },
      data: updateData
    })

    res.json({
      message: '–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
      operation
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏:', error)
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
}

export const deleteCashOperation = async (req: Request, res: Response) => {
  try {
    const { id } = req.params

    await prisma.cash.delete({
      where: { id: Number(id) }
    })

    res.json({ message: '–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞' })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏:', error)
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
}

export const getCashStats = async (req: Request, res: Response) => {
  try {
    const { date_from, date_to } = req.query
    
    const where: any = {}
    
    if (date_from || date_to) {
      where.dateCreate = {}
      if (date_from) {
        where.dateCreate.gte = new Date(date_from as string)
      }
      if (date_to) {
        where.dateCreate.lte = new Date(date_to as string)
      }
    }

    const [income, expenses] = await Promise.all([
      prisma.cash.aggregate({
        where: {
          ...where,
          name: '–ø—Ä–∏—Ö–æ–¥'
        },
        _sum: {
          amount: true
        },
        _count: true
      }),
      prisma.cash.aggregate({
        where: {
          ...where,
          name: '—Ä–∞—Å—Ö–æ–¥'
        },
        _sum: {
          amount: true
        },
        _count: true
      })
    ])

    const totalIncome = Number(income._sum.amount) || 0
    const totalExpenses = Number(expenses._sum.amount) || 0
    const netIncome = totalIncome - totalExpenses

    res.json({
      stats: {
        totalIncome,
        totalExpenses,
        netIncome,
        incomeCount: income._count,
        expenseCount: expenses._count
      }
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—Å—Å—ã:', error)
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
}
