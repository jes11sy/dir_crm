import { Request, Response } from 'express'
import { prisma } from '../lib/prisma'

export const getMastersReports = async (req: Request, res: Response) => {
  try {
    console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º...')

    // –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –∏–∑ —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const userCity = req.query.city as string
    console.log('üèôÔ∏è –ì–æ—Ä–æ–¥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞:', userCity)

    // –ë–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
    const whereConditions: any = {
      statusOrder: '–ì–æ—Ç–æ–≤–æ'
    }

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –≥–æ—Ä–æ–¥, —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –Ω–µ–º—É
    if (userCity && userCity !== 'all') {
      whereConditions.master = {
        cities: {
          has: userCity
        }
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'ready' (–≥–æ—Ç–æ–≤–æ)
    const orders = await prisma.order.findMany({
      where: whereConditions,
      include: {
        master: {
          select: {
            id: true,
            name: true,
            cities: true
          }
        }
      }
    })

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${orders.length} –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤`)

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º
    const masterStats = new Map()

    orders.forEach(order => {
      if (!order.master) return

      const masterId = order.master.id
      const masterName = order.master.name
      const masterCities = order.master.cities

      if (!masterStats.has(masterId)) {
        masterStats.set(masterId, {
          id: masterId,
          name: masterName,
          cities: masterCities,
          ordersCount: 0,
          totalRevenue: 0,
          totalExpenditure: 0,
          totalClean: 0,
          totalMasterChange: 0,
          orders: []
        })
      }

      const stats = masterStats.get(masterId)
      stats.ordersCount += 1
      stats.totalRevenue += Number(order.result || 0)
      stats.totalExpenditure += Number(order.expenditure || 0)
      stats.totalClean += Number(order.clean || 0)
      stats.totalMasterChange += Number(order.masterChange || 0)
      stats.orders.push(order)
    })

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã
    const reports = Array.from(masterStats.values()).map(stats => {
      const averageCheck = stats.ordersCount > 0 ? stats.totalClean / stats.ordersCount : 0
      const salary = stats.totalMasterChange // –ó–∞—Ä–ø–ª–∞—Ç–∞ = —Å—É–º–º–∞ –≤—Å–µ—Ö "—Å–¥–∞—á–∞ –º–∞—Å—Ç–µ—Ä–∞"

      return {
        id: stats.id,
        name: stats.name,
        city: stats.cities,
        ordersCount: stats.ordersCount,
        totalRevenue: stats.totalRevenue,
        averageCheck: Math.round(averageCheck),
        salary: salary
      }
    })

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–∫–∞–∑–æ–≤
    reports.sort((a, b) => b.ordersCount - a.ordersCount)

    console.log(`‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ ${reports.length} –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º`)

    res.json(reports)
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º:', error)
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
}

export const getCityReports = async (req: Request, res: Response) => {
  try {
    console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –≥–æ—Ä–æ–¥–∞–º...')

    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    const userCity = req.query.city as string
    const dateFrom = req.query.dateFrom as string
    const dateTo = req.query.dateTo as string
    
    console.log('üèôÔ∏è –ì–æ—Ä–æ–¥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞:', userCity)
    console.log('üìÖ –ü–µ—Ä–∏–æ–¥:', { dateFrom, dateTo })

    // –ë–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
    const whereConditions: any = {
      statusOrder: '–ì–æ—Ç–æ–≤–æ',
      closingData: {
        not: null // –¢–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã —Å –¥–∞—Ç–æ–π –∑–∞–∫—Ä—ã—Ç–∏—è
      }
    }

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –≥–æ—Ä–æ–¥, —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –Ω–µ–º—É
    if (userCity && userCity !== 'all') {
      whereConditions.city = userCity
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –µ—Å–ª–∏ –∑–∞–¥–∞–Ω –ø–µ—Ä–∏–æ–¥ (–ø–æ –¥–∞—Ç–µ –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–∫–∞–∑–∞)
    if (dateFrom || dateTo) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —É—Å–ª–æ–≤–∏–µ closingData
      if (dateFrom) {
        whereConditions.closingData.gte = new Date(dateFrom)
      }
      if (dateTo) {
        // –î–æ–±–∞–≤–ª—è–µ–º 1 –¥–µ–Ω—å –∫ dateTo —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –≤–µ—Å—å –¥–µ–Ω—å
        const endDate = new Date(dateTo)
        endDate.setDate(endDate.getDate() + 1)
        whereConditions.closingData.lt = endDate
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'ready' (–≥–æ—Ç–æ–≤–æ)
    const orders = await prisma.order.findMany({
      where: whereConditions,
      include: {
        master: {
          select: {
            id: true,
            name: true,
            cities: true
          }
        }
      }
    })

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${orders.length} –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤`)

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≥–æ—Ä–æ–¥–∞–º
    const cityStats = new Map()

    orders.forEach(order => {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ä–æ–¥ –∑–∞–∫–∞–∑–∞, –∞ –Ω–µ –≥–æ—Ä–æ–¥–∞ –º–∞—Å—Ç–µ—Ä–∞
      const orderCity = order.city
      
      if (!cityStats.has(orderCity)) {
        cityStats.set(orderCity, {
          city: orderCity,
          closedOrders: 0,
          totalRevenue: 0,
          totalExpenditure: 0,
          totalClean: 0,
          totalMasterChange: 0,
          orders: []
        })
      }

      const stats = cityStats.get(orderCity)
      stats.closedOrders += 1
      stats.totalRevenue += Number(order.result || 0)
      stats.totalExpenditure += Number(order.expenditure || 0)
      stats.totalClean += Number(order.clean || 0)
      stats.totalMasterChange += Number(order.masterChange || 0)
      stats.orders.push(order)
    })

    // –ü–æ–ª—É—á–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –∫–∞—Å—Å—ã (–ø—Ä–∏—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã)
    const cashWhereConditions: any = {
      OR: [
        { name: '—Ä–∞—Å—Ö–æ–¥' },
        { name: '–ø—Ä–∏—Ö–æ–¥' }
      ]
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –∫–∞—Å—Å—ã
    if (dateFrom || dateTo) {
      cashWhereConditions.dateCreate = {}
      if (dateFrom) {
        cashWhereConditions.dateCreate.gte = new Date(dateFrom)
      }
      if (dateTo) {
        const endDate = new Date(dateTo)
        endDate.setDate(endDate.getDate() + 1)
        cashWhereConditions.dateCreate.lt = endDate
      }
    }

    const cashOperations = await prisma.cash.findMany({
      where: cashWhereConditions
    })

    console.log(`üí∞ –ù–∞–π–¥–µ–Ω–æ ${cashOperations.length} –æ–ø–µ—Ä–∞—Ü–∏–π –∫–∞—Å—Å—ã`)

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –∫–∞—Å—Å—ã –ø–æ –≥–æ—Ä–æ–¥–∞–º
    const cityCash = new Map()
    cashOperations.forEach(operation => {
      const city = operation.city || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
      
      if (!cityCash.has(city)) {
        cityCash.set(city, {
          income: 0,
          expenses: 0,
          balance: 0
        })
      }

      const cityData = cityCash.get(city)
      if (operation.name === '–ø—Ä–∏—Ö–æ–¥') {
        cityData.income += Number(operation.amount)
      } else if (operation.name === '—Ä–∞—Å—Ö–æ–¥') {
        cityData.expenses += Number(operation.amount)
      }
      cityData.balance = cityData.income - cityData.expenses
    })

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã
    const reports = Array.from(cityStats.values()).map(stats => {
      const averageCheck = stats.closedOrders > 0 ? stats.totalRevenue / stats.closedOrders : 0
      const companyIncome = stats.totalMasterChange // –î–æ—Ö–æ–¥ –∫–æ–º–ø–∞–Ω–∏–∏ = —Å–¥–∞—á–∞ –º–∞—Å—Ç–µ—Ä–∞
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Å—Å—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞
      const cashData = cityCash.get(stats.city) || { income: 0, expenses: 0, balance: 0 }

      return {
        city: stats.city,
        closedOrders: stats.closedOrders,
        averageCheck: Math.round(averageCheck),
        totalRevenue: stats.totalRevenue,
        companyIncome: companyIncome,
        cashBalance: cashData.balance // –ë–∞–ª–∞–Ω—Å –∫–∞—Å—Å—ã = –ø—Ä–∏—Ö–æ–¥—ã - —Ä–∞—Å—Ö–æ–¥—ã
      }
    })

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–∫–∞–∑–æ–≤
    reports.sort((a, b) => b.closedOrders - a.closedOrders)

    console.log(`‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ ${reports.length} –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –≥–æ—Ä–æ–¥–∞–º`)

    res.json(reports)
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –≥–æ—Ä–æ–¥–∞–º:', error)
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
}
