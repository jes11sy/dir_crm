import { Request, Response } from 'express'
import { prisma } from '../lib/prisma'

export const getMasters = async (req: Request, res: Response) => {
  try {
    const { page = 1, limit = 10, city, status_work } = req.query
    
    const skip = (Number(page) - 1) * Number(limit)
    
    const where: any = {}
    
    if (city) {
      where.cities = {
        has: city
      }
    }
    
    if (status_work) {
      where.statusWork = status_work
    }

    const [masters, total] = await Promise.all([
      prisma.master.findMany({
        where,
        skip,
        take: Number(limit),
        include: {
          orders: {
            select: {
              id: true,
              statusOrder: true,
              result: true,
              dateMeeting: true
            }
          }
        },
        orderBy: {
          createdAt: 'desc'
        }
      }),
      prisma.master.count({ where })
    ])

    console.log('üì¶ –î–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞:', masters.map(m => ({ 
      id: m.id, 
      name: m.name, 
      cities: m.cities 
    })))

    res.json({
      masters,
      pagination: {
        page: Number(page),
        limit: Number(limit),
        total,
        pages: Math.ceil(total / Number(limit))
      }
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–æ–≤:', error)
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
}

export const getMasterById = async (req: Request, res: Response) => {
  try {
    const { id } = req.params

    const master = await prisma.master.findUnique({
      where: { id: Number(id) },
        include: {
          orders: {
            select: {
              id: true,
              rk: true,
              clientName: true,
              statusOrder: true,
              result: true,
              dateMeeting: true,
              createdAt: true
            },
            orderBy: {
              createdAt: 'desc'
            }
          }
        }
    })

    if (!master) {
      return res.status(404).json({ message: '–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' })
    }

    res.json(master)
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞:', error)
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
}

export const createMaster = async (req: Request, res: Response) => {
  try {
    const { city, cities, name, passportDoc, contractDoc, statusWork, note, tgId, chatId } = req.body

    if (!name || !statusWork) {
      return res.status(400).json({
        message: '–ò–º—è –∏ —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      })
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ—Ä–æ–¥–∞ - –ø–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –≥–æ—Ä–æ–¥–æ–≤
    let masterCities: string[] = []
    
    if (cities && Array.isArray(cities) && cities.length > 0) {
      masterCities = cities
    } else if (city && Array.isArray(city)) {
      masterCities = city
    } else if (city) {
      masterCities = [city]
    } else {
      return res.status(400).json({
        message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≥–æ—Ä–æ–¥'
      })
    }

    const master = await prisma.master.create({
      data: {
        cities: masterCities,
        name,
        passportDoc,
        contractDoc,
        statusWork,
        note,
        tgId,
        chatId
      }
    })

    res.status(201).json({
      message: '–ú–∞—Å—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
      master
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞:', error)
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
}

export const updateMaster = async (req: Request, res: Response) => {
  try {
    const { id } = req.params
    const updateData = req.body

    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞:', { id, updateData })

    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–ª—å–∑—è –æ–±–Ω–æ–≤–ª—è—Ç—å –Ω–∞–ø—Ä—è–º—É—é
    delete updateData.id
    delete updateData.createdAt
    delete updateData.updatedAt
    delete updateData.orders // –ò—Å–∫–ª—é—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    
    // –û—á–∏—â–∞–µ–º –æ—Ç undefined –∑–Ω–∞—á–µ–Ω–∏–π
    Object.keys(updateData).forEach(key => {
      if (updateData[key] === undefined) {
        delete updateData[key]
      }
    })

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    if (updateData.city && Array.isArray(updateData.city)) {
      // –ï—Å–ª–∏ city - —ç—Ç–æ –º–∞—Å—Å–∏–≤, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ cities
      updateData.cities = updateData.city
      delete updateData.city // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!updateData.name || !updateData.statusWork) {
      return res.status(400).json({
        message: '–ò–º—è –∏ —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      })
    }

    const master = await prisma.master.update({
      where: { id: Number(id) },
      data: updateData
    })

    console.log('‚úÖ –ú–∞—Å—Ç–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω:', master)

    res.json({
      message: '–ú–∞—Å—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
      master
    })
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞:', error)
    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
      message: error.message,
      code: error.code,
      meta: error.meta
    })
    res.status(500).json({ 
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    })
  }
}

export const deleteMaster = async (req: Request, res: Response) => {
  try {
    const { id } = req.params

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –º–∞—Å—Ç–µ—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    const activeOrders = await prisma.order.count({
      where: {
        masterId: Number(id),
        statusOrder: {
          in: ['–Ω–æ–≤—ã–π', '–≤ —Ä–∞–±–æ—Ç–µ']
        }
      }
    })

    if (activeOrders > 0) {
      return res.status(400).json({ 
        message: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏' 
      })
    }

    await prisma.master.delete({
      where: { id: Number(id) }
    })

    res.json({ message: '–ú–∞—Å—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω' })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞:', error)
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
}

export const getMasterStats = async (req: Request, res: Response) => {
  try {
    const { id } = req.params

    const master = await prisma.master.findUnique({
      where: { id: Number(id) },
      include: {
        orders: {
          where: {
            statusOrder: '–∑–∞–≤–µ—Ä—à–µ–Ω'
          },
          select: {
            result: true,
            expenditure: true,
            clean: true,
            dateMeeting: true
          }
        }
      }
    })

    if (!master) {
      return res.status(404).json({ message: '–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' })
    }

    const completedOrders = master.orders
    const totalOrders = completedOrders.length
    const totalRevenue = completedOrders.reduce((sum, order) => sum + (order.result || 0), 0)
    const totalExpenditure = completedOrders.reduce((sum, order) => sum + (order.expenditure || 0), 0)
    const totalClean = completedOrders.reduce((sum, order) => sum + (order.clean || 0), 0)
    const averageCheck = totalOrders > 0 ? totalRevenue / totalOrders : 0

    res.json({
      master: {
        id: master.id,
        name: master.name,
        cities: master.cities,
        status_work: master.status_work
      },
      stats: {
        totalOrders,
        totalRevenue,
        totalExpenditure,
        totalClean,
        averageCheck,
        salary: totalClean // –ó–∞—Ä–ø–ª–∞—Ç–∞ = —á–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥
      }
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Å—Ç–µ—Ä–∞:', error)
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
}
