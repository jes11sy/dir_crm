import { Request, Response } from 'express'
import { prisma } from '../lib/prisma'
// import { cacheUtils } from '../lib/redis' // Redis disabled

export const getFilterOptions = async (req: Request, res: Response) => {
  try {
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤...')
    
    const [statuses, cities, masters] = await Promise.all([
      prisma.order.findMany({
        select: { statusOrder: true },
        distinct: ['statusOrder']
      }),
      prisma.order.findMany({
        select: { city: true },
        distinct: ['city']
      }),
      prisma.master.findMany({
        select: { name: true },
        where: { statusWork: '—Ä–∞–±–æ—Ç–∞–µ—Ç' }
      })
    ])

    const filterOptions = {
      statuses: statuses.map(s => s.statusOrder).filter(Boolean),
      cities: cities.map(c => c.city).filter(Boolean),
      masters: masters.map(m => m.name).filter(Boolean)
    }

    console.log('üì¶ –û–ø—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', filterOptions)
    res.json(filterOptions)
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ü–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error)
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ü–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤' })
  }
}

export const getOrders = async (req: Request, res: Response) => {
  try {
    const { page = 1, limit = 10, status, city, master, search } = req.query
    
    console.log('üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', { page, limit, status, city, master, search })
    
    const skip = (Number(page) - 1) * Number(limit)
    
    const where: any = {}
    
    if (status && status !== 'all') {
      where.statusOrder = status
    }
    
    if (city && city !== 'all') {
      where.city = city
    }
    
    if (master && master !== 'all') {
      where.master = {
        name: {
          equals: master
        }
      }
    }
    
    if (search) {
      const searchConditions: any[] = [
        { phone: { contains: search as string } },
        { address: { contains: search as string } }
      ]
      
      // –ï—Å–ª–∏ search - —ç—Ç–æ —á–∏—Å–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫ –ø–æ ID
      const searchAsNumber = parseInt(search as string)
      if (!isNaN(searchAsNumber)) {
        searchConditions.push({ id: searchAsNumber })
      }
      
      where.OR = searchConditions
    }
    
    console.log('üîç Where —É—Å–ª–æ–≤–∏–µ:', JSON.stringify(where, null, 2))

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –±–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const allOrders = await prisma.order.findMany({
      where,
      include: {
        master: {
          select: {
            id: true,
            name: true,
            cities: true
          }
        },
        operator: {
          select: {
            id: true,
            name: true
          }
        }
      }
    })

    // –ö–∞—Å—Ç–æ–º–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: —Å–Ω–∞—á–∞–ª–∞ "–û–∂–∏–¥–∞–µ—Ç" –ø–æ –¥–∞—Ç–µ –≤—Å—Ç—Ä–µ—á–∏, –ø–æ—Ç–æ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
    const statusPriority: Record<string, number> = {
      '–û–∂–∏–¥–∞–µ—Ç': 1,
      '–ü—Ä–∏–Ω—è–ª': 2,
      '–í —Ä–∞–±–æ—Ç–µ': 3,
      '–ú–æ–¥–µ—Ä–Ω': 4,
      '–ì–æ—Ç–æ–≤–æ': 5,
      '–û—Ç–∫–∞–∑': 6,
      '–ù–µ–∑–∞–∫–∞–∑': 7
    }

    const sortedOrders = allOrders.sort((a, b) => {
      const priorityA = statusPriority[a.statusOrder] || 999
      const priorityB = statusPriority[b.statusOrder] || 999
      
      // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É —Å—Ç–∞—Ç—É—Å–∞
      if (priorityA !== priorityB) {
        return priorityA - priorityB
      }
      
      // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –≤—Å—Ç—Ä–µ—á–∏ (–¥–ª—è "–û–∂–∏–¥–∞–µ—Ç" - –±–ª–∏–∂–∞–π—à–∏–µ –ø–µ—Ä–≤—ã–º–∏)
      if (a.statusOrder === '–û–∂–∏–¥–∞–µ—Ç' && b.statusOrder === '–û–∂–∏–¥–∞–µ—Ç') {
        return new Date(a.dateMeeting).getTime() - new Date(b.dateMeeting).getTime()
      }
      
      // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ - –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
      return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
    })

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∫ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
    const total = sortedOrders.length
    const orders = sortedOrders.slice(skip, skip + Number(limit))

    const result = {
      orders,
      pagination: {
        page: Number(page),
        limit: Number(limit),
        total,
        pages: Math.ceil(total / Number(limit))
      }
    }

    res.json(result)
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error)
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
}

export const getOrderById = async (req: Request, res: Response) => {
  try {
    const { id } = req.params

    const order = await prisma.order.findUnique({
      where: { id: Number(id) },
      include: {
        master: {
          select: {
            id: true,
            name: true,
            cities: true,
            statusWork: true
          }
        },
        operator: {
          select: {
            id: true,
            name: true
          }
        }
      }
    })

    if (!order) {
      return res.status(404).json({ message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' })
    }

    res.json(order)
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error)
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
}

export const updateOrder = async (req: Request, res: Response) => {
  try {
    const { id } = req.params
    const updateData = req.body

    console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ${id}:`, JSON.stringify(updateData, null, 2))

    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–ª—å–∑—è –æ–±–Ω–æ–≤–ª—è—Ç—å –Ω–∞–ø—Ä—è–º—É—é
    delete updateData.id
    delete updateData.createdAt
    delete updateData.updatedAt
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–∫–ª—é—á–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–æ–ª—è —Å–≤—è–∑–µ–π
    delete updateData.master
    delete updateData.avito
    delete updateData.operator
    
    // –£–¥–∞–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–ª—å–∑—è –æ–±–Ω–æ–≤–ª—è—Ç—å
    delete updateData.operatorNameId
    delete updateData.createDate

    // –û—á–∏—â–∞–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π, –∑–∞–º–µ–Ω—è—è –∏—Ö –Ω–∞ undefined
    if (updateData.result === null) updateData.result = undefined
    if (updateData.expenditure === null) updateData.expenditure = undefined
    if (updateData.clean === null) updateData.clean = undefined
    if (updateData.masterChange === null) updateData.masterChange = undefined
    if (updateData.masterId === null) updateData.masterId = undefined

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –µ—Å–ª–∏ –æ–Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
    if (updateData.dateMeeting && typeof updateData.dateMeeting === 'string') {
      updateData.dateMeeting = new Date(updateData.dateMeeting)
    }

    // –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π
    const allowedFields = [
      'rk', 'city', 'avitoName', 'phone', 'typeOrder', 'clientName', 
      'address', 'dateMeeting', 'typeEquipment', 'problem', 'callRecord',
      'statusOrder', 'masterId', 'result', 'expenditure', 'clean', 
      'masterChange', 'bsoDoc', 'expenditureDoc', 'avitoChatId', 'callId',
      'closingData'
    ]
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø–æ–ª—è
    const filteredData: any = {}
    for (const field of allowedFields) {
      if (updateData.hasOwnProperty(field)) {
        filteredData[field] = updateData[field]
      }
    }

    console.log(`üìù –û—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:`, JSON.stringify(filteredData, null, 2))

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
    const currentOrder = await prisma.order.findUnique({
      where: { id: Number(id) },
      select: { statusOrder: true, masterChange: true, closingData: true }
    })

    if (!currentOrder) {
      return res.status(404).json({ message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π
    const finalStatuses = ['–ì–æ—Ç–æ–≤–æ', '–û—Ç–∫–∞–∑', '–ù–µ–∑–∞–∫–∞–∑']
    const isChangingToFinalStatus = filteredData.statusOrder && 
      finalStatuses.includes(filteredData.statusOrder) && 
      currentOrder.statusOrder !== filteredData.statusOrder

    // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∏ –¥–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
    if (isChangingToFinalStatus && !currentOrder.closingData) {
      filteredData.closingData = new Date()
      console.log(`üìÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–∫–∞–∑–∞: ${filteredData.closingData}`)
    }

    const order = await prisma.order.update({
      where: { id: Number(id) },
      data: filteredData,
      include: {
        master: {
          select: {
            id: true,
            name: true,
            cities: true
          }
        }
      }
    })

    // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ "–ì–æ—Ç–æ–≤–æ", —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏—Ö–æ–¥ –≤ –∫–∞—Å—Å—É
    if (filteredData.statusOrder === '–ì–æ—Ç–æ–≤–æ' && 
        currentOrder.statusOrder !== '–ì–æ—Ç–æ–≤–æ' && 
        order.result && 
        Number(order.result) > 0) {
      
      try {
        const masterName = order.master ? order.master.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä'
        const noteText = `${masterName} - –ò—Ç–æ–≥ –ø–æ –∑–∞–∫–∞–∑—É: ${order.result}‚ÇΩ`
        
        await prisma.cash.create({
          data: {
            name: '–ø—Ä–∏—Ö–æ–¥',
            amount: order.result,
            city: order.city,
            note: noteText,
            nameCreate: '–°–∏—Å—Ç–µ–º–∞',
            paymentPurpose: `–ó–∞–∫–∞–∑ ‚Ññ${order.id}`
          }
        })
        
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–∏—Ö–æ–¥ ${order.result}‚ÇΩ –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ${order.id} (–º–∞—Å—Ç–µ—Ä: ${masterName})`)
      } catch (cashError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∞:', cashError)
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      }
    }

    res.json({
      message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
      order
    })
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error)
    console.error('‚ùå Stack trace:', error instanceof Error ? error.stack : 'Unknown error')
    res.status(500).json({ 
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: process.env.NODE_ENV === 'development' ? error : undefined
    })
  }
}

export const assignMaster = async (req: Request, res: Response) => {
  try {
    const { id } = req.params
    const { master_id } = req.body

    if (!master_id) {
      return res.status(400).json({ message: 'ID –º–∞—Å—Ç–µ—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞—Å—Ç–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const master = await prisma.master.findUnique({
      where: { id: master_id }
    })

    if (!master) {
      return res.status(404).json({ message: '–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' })
    }

    const order = await prisma.order.update({
      where: { id: Number(id) },
      data: { masterId: master_id },
      include: {
        master: {
          select: {
            id: true,
            name: true,
            cities: true
          }
        }
      }
    })

    res.json({
      message: '–ú–∞—Å—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω',
      order
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞:', error)
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
}

export const closeOrder = async (req: Request, res: Response) => {
  try {
    const { id } = req.params
    const { result, expenditure, clean, masterChange } = req.body

    const updateData: any = {
      statusOrder: 'ready', // –ò–∑–º–µ–Ω—è–µ–º –Ω–∞ 'ready' –≤–º–µ—Å—Ç–æ '–∑–∞–≤–µ—Ä—à–µ–Ω'
      closingData: new Date()
    }

    if (result !== undefined) updateData.result = result
    if (expenditure !== undefined) updateData.expenditure = expenditure
    if (clean !== undefined) updateData.clean = clean
    if (masterChange !== undefined) updateData.masterChange = masterChange

    const order = await prisma.order.update({
      where: { id: Number(id) },
      data: updateData,
      include: {
        master: {
          select: {
            id: true,
            name: true,
            cities: true
          }
        }
      }
    })

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏—Ö–æ–¥ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞–∫–∞–∑–∞
    if (order.result && Number(order.result) > 0) {
      try {
        const masterName = order.master ? order.master.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä'
        const noteText = `${masterName} - –ò—Ç–æ–≥ –ø–æ –∑–∞–∫–∞–∑—É: ${order.result}‚ÇΩ`
        
        await prisma.cash.create({
          data: {
            name: '–ø—Ä–∏—Ö–æ–¥',
            amount: order.result,
            city: order.city,
            note: noteText,
            nameCreate: '–°–∏—Å—Ç–µ–º–∞',
            paymentPurpose: `–ó–∞–∫–∞–∑ ‚Ññ${order.id}`
          }
        })
        
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–∏—Ö–æ–¥ ${order.result}‚ÇΩ –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ${order.id} (–º–∞—Å—Ç–µ—Ä: ${masterName})`)
      } catch (cashError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∞:', cashError)
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      }
    }

    res.json({
      message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç',
      order
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–∫–∞–∑–∞:', error)
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
}
