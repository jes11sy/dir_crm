import { Request, Response } from 'express'
import multer from 'multer'
import path from 'path'
import { uploadFileToS3, deleteFileFromS3 } from '../services/s3'

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ø–∞–º—è—Ç—å (–Ω–µ –Ω–∞ –¥–∏—Å–∫)
const storage = multer.memoryStorage()

const upload = multer({
  storage: storage,
  limits: {
    fileSize: 10 * 1024 * 1024 // 10MB
  },
  fileFilter: (req, file, cb) => {
    const allowedTypes = /jpeg|jpg|png|pdf/
    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase())
    const mimetype = allowedTypes.test(file.mimetype)

    if (mimetype && extname) {
      return cb(null, true)
    } else {
      cb(new Error('–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ PDF —Ñ–∞–π–ª—ã'))
    }
  }
})

export const uploadMiddleware = upload.single('document')

export const uploadDocument = async (req: Request, res: Response) => {
  try {
    if (!req.file) {
      return res.status(400).json({ message: '–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω' })
    }

    console.log('üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ S3:', req.file.originalname)
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫—É –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–ø–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const folder = req.body.folder || 'documents'
    console.log('üìÅ –ü–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:', folder)
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ S3
    const uploadResult = await uploadFileToS3(
      req.file.buffer,
      req.file.originalname,
      req.file.mimetype,
      folder
    )

    console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ S3:', uploadResult.url)
    
    res.json({
      message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω',
      filename: uploadResult.key,
      originalName: uploadResult.originalName,
      size: req.file.size,
      url: uploadResult.url,
      s3Key: uploadResult.key
    })
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ S3:', error)
    res.status(500).json({ 
      message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞', 
      error: error.message 
    })
  }
}

export const deleteDocument = async (req: Request, res: Response) => {
  try {
    const { filename } = req.params
    
    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ S3:', filename)
    
    // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ S3
    await deleteFileFromS3(filename)
    
    console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ S3:', filename)
    res.json({ message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω' })
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–∑ S3:', error)
    res.status(500).json({ 
      message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞',
      error: error.message 
    })
  }
}
