import { Router, Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import { GetObjectCommand } from '@aws-sdk/client-s3';
import { s3Client, checkFileExists } from '../services/s3';
import '../types'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ç–∏–ø–æ–≤

const router = Router();

// –ö–∞—Å—Ç–æ–º–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω –≤ query –ø–∞—Ä–∞–º–µ—Ç—Ä–µ)
const authenticateAudio = (req: Request, res: Response, next: Function) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–ª–∏ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    let token = req.headers.authorization?.replace('Bearer ', '');
    
    if (!token && req.query.token) {
      token = req.query.token as string;
    }

    if (!token) {
      return res.status(401).json({ message: '–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your-secret-key');
    req.user = decoded;
    next();
  } catch (error) {
    return res.status(403).json({ message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });
  }
};

// OPTIONS –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ server.ts

// GET /api/recordings/* - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ S3 —Ñ–∞–π–ª
router.get('/*', authenticateAudio, async (req: Request, res: Response) => {
  try {
    const filePath = req.params[0]; // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –ø–æ—Å–ª–µ /recordings/
    
    if (!filePath) {
      return res.status(400).json({ 
        error: '–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ —É–∫–∞–∑–∞–Ω' 
      });
    }

    console.log(`üéµ –ó–∞–ø—Ä–æ—Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: ${filePath}`);
    console.log(`üîê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${req.user ? '–î–∞' : '–ù–µ—Ç'}`);

    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—É—Ç–∏ –≤ S3
    const possibleKeys = [
      filePath, // callcentre/recording_path/—Ñ–∞–π–ª.mp3
      `f7eead03-crmfiles/${filePath}`, // f7eead03-crmfiles/callcentre/recording_path/—Ñ–∞–π–ª.mp3
      `recordings/${filePath}`, // recordings/callcentre/recording_path/—Ñ–∞–π–ª.mp3
    ];
    
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç–∏:`, possibleKeys);
    
    let s3Key = null;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –≤–æ–∑–º–æ–∂–Ω—ã–π –ø—É—Ç—å
    for (const key of possibleKeys) {
      const exists = await checkFileExists(key);
      if (exists) {
        s3Key = key;
        break;
      }
    }

    if (!s3Key) {
      return res.status(404).json({ 
        error: '–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ S3'
      });
    }

    console.log(`üìÅ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –≤ S3: ${s3Key}`);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Range –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∞—É–¥–∏–æ
    const range = req.headers.range;
    let getObjectParams: any = {
      Bucket: process.env.S3_BUCKET,
      Key: s3Key,
    };

    // –ï—Å–ª–∏ –µ—Å—Ç—å Range –∑–∞–≥–æ–ª–æ–≤–æ–∫, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∑–∞–ø—Ä–æ—Å –∫ S3
    if (range) {
      getObjectParams.Range = range;
      console.log(`üìä Range –∑–∞–ø—Ä–æ—Å: ${range}`);
    }

    const getObjectCommand = new GetObjectCommand(getObjectParams);
    const s3Response = await s3Client.send(getObjectCommand);
    
    if (!s3Response.Body) {
      return res.status(404).json({ 
        error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ S3'
      });
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞—É–¥–∏–æ
    res.setHeader('Content-Type', s3Response.ContentType || 'audio/mpeg');
    res.setHeader('Accept-Ranges', 'bytes');
    res.setHeader('Cache-Control', 'public, max-age=3600');
    
    // –ï—Å–ª–∏ —ç—Ç–æ partial content (Range –∑–∞–ø—Ä–æ—Å)
    if (s3Response.ContentRange) {
      res.status(206); // Partial Content
      res.setHeader('Content-Range', s3Response.ContentRange);
      res.setHeader('Content-Length', s3Response.ContentLength || 0);
    } else {
      res.status(200);
      res.setHeader('Content-Length', s3Response.ContentLength || 0);
    }
    
    console.log(`üéµ –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª: ${s3Key} (${s3Response.ContentLength} bytes)`);
    
    // –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö
    const stream = s3Response.Body as NodeJS.ReadableStream;
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ—Ç–æ–∫–∞
    stream.on('error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–∞ S3:', error);
      if (!res.headersSent) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞' });
      }
    });

    res.on('close', () => {
      console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –∫–ª–∏–µ–Ω—Ç–æ–º');
      if (stream && typeof (stream as any).destroy === 'function') {
        (stream as any).destroy();
      }
    });

    stream.pipe(res);

  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞'
    });
  }
});

export default router;
