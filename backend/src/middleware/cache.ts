import { Request, Response, NextFunction } from 'express'
import { cacheUtils } from '../lib/redis'

export const cacheMiddleware = (ttl: number = 300) => {
  return async (req: Request, res: Response, next: NextFunction) => {
    // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫—ç—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ URL –∏ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const cacheKey = `cache:${req.originalUrl}:${JSON.stringify(req.query)}`
    
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
      const cachedData = await cacheUtils.get(cacheKey)
      
      if (cachedData) {
        console.log(`üì¶ Cache HIT: ${cacheKey}`)
        return res.json(cachedData)
      }
      
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤ –∫—ç—à–µ, –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
      const originalSend = res.json
      res.json = function(data: any) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à
        cacheUtils.set(cacheKey, data, ttl).catch(console.error)
        console.log(`üíæ Cache SET: ${cacheKey}`)
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        return originalSend.call(this, data)
      }
      
      next()
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
      next()
    }
  }
}

// Middleware –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
export const clearCacheMiddleware = (pattern: string) => {
  return async (req: Request, res: Response, next: NextFunction) => {
    try {
      await cacheUtils.clearPattern(pattern)
      console.log(`üóëÔ∏è Cache CLEARED: ${pattern}`)
      next()
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞:', error)
      next()
    }
  }
}
