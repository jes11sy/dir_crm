"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from "@/components/ui/tabs"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { Save, X, Upload, FileText, Trash2, CheckCircle, Loader2, User, Files } from "lucide-react"
import { useAuth } from "@/lib/auth-context"
import { config } from "@/lib/config"

interface Master {
  id: number
  cities: string[] // –ú–∞—Å—Å–∏–≤ –≥–æ—Ä–æ–¥–æ–≤
  name: string
  passportDoc?: string
  contractDoc?: string
  statusWork: string
  dateCreate: string
  note?: string
  tgId?: string
  chatId?: string
}

interface MasterEditModalProps {
  master: Master | null
  isOpen: boolean
  onClose: () => void
  onSave: (master: Master) => void
}

export function MasterEditModal({ master, isOpen, onClose, onSave }: MasterEditModalProps) {
  const { user, isLoading } = useAuth()
  const [formData, setFormData] = useState<Partial<Master>>({})
  const [passportFile, setPassportFile] = useState<File | null>(null)
  const [contractFile, setContractFile] = useState<File | null>(null)
  const [selectedCities, setSelectedCities] = useState<string[]>([])
  const [currentUser, setCurrentUser] = useState<any>(null)
  const [passportPreview, setPassportPreview] = useState<string | null>(null)
  const [contractPreview, setContractPreview] = useState<string | null>(null)
  const [uploadingPassport, setUploadingPassport] = useState(false)
  const [uploadingContract, setUploadingContract] = useState(false)
  const [activeTab, setActiveTab] = useState("info")


  // –ù–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–æ–¥–∞–ª –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (isLoading) {
    return null
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ API
  const loadCurrentUser = async () => {
    try {
      const response = await fetch(`${config.apiUrl}/api/auth/profile`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      })

      if (response.ok) {
        const data = await response.json()
        setCurrentUser(data.user)
      }
    } catch (error) {
    }
  }

  useEffect(() => {
    if (isOpen && !currentUser) {
      loadCurrentUser()
    }
  }, [isOpen])

  useEffect(() => {
    if (master) {
      setFormData(master)
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
      setSelectedCities(master.cities || [])
    } else {
      setFormData({
        cities: [],
        name: "",
        statusWork: "—Ä–∞–±–æ—Ç–∞–µ—Ç",
        note: "",
        tgId: "",
        chatId: ""
      })
      setSelectedCities([])
    }
    setPassportFile(null)
    setContractFile(null)
    setPassportPreview(null)
    setContractPreview(null)
    setUploadingPassport(false)
    setUploadingContract(false)
    setActiveTab("info")
  }, [master])

  const handleSave = () => {
    if (formData && selectedCities.length > 0) {
      const updatedMaster = {
        ...formData,
        cities: selectedCities, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Å—Å–∏–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
        passportDoc: passportFile ? passportFile.name : formData.passportDoc,
        contractDoc: contractFile ? contractFile.name : formData.contractDoc,
        tgId: formData.tgId || undefined, // –Ø–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º tgId
        chatId: formData.chatId || undefined, // –Ø–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º chatId
      } as Master
      console.log('üíæ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ:', updatedMaster)
      onSave(updatedMaster)
      // –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –∑–¥–µ—Å—å - —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    }
  }

  const handleInputChange = (field: keyof Master, value: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }))
  }

  const handleCityToggle = (city: string) => {
    setSelectedCities(prev => {
      if (prev.includes(city)) {
        return prev.filter(c => c !== city)
      } else {
        return [...prev, city]
      }
    })
  }

  // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
  const getAvailableCities = () => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∏–∑ auth-context
    const userData = currentUser || user
    
    if (!userData?.cities || !Array.isArray(userData.cities) || userData.cities.length === 0) {
      return []
    }
    
    return userData.cities
  }
  
  const availableCities = getAvailableCities()

  const processFile = (type: 'passport' | 'contract', file: File) => {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    const maxSize = 5 * 1024 * 1024 // 5MB
    if (file.size > maxSize) {
      alert('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5 –ú–ë')
      return
    }

    const allowedTypes = ['image/jpeg', 'image/png', 'application/pdf']
    if (!allowedTypes.includes(file.type)) {
      alert('–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã —Ñ–æ—Ä–º–∞—Ç–∞ JPG, PNG, PDF')
      return
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if (type === 'passport') {
      setPassportFile(file)
      if (file.type.startsWith('image/')) {
        const reader = new FileReader()
        reader.onload = (e) => setPassportPreview(e.target?.result as string)
        reader.readAsDataURL(file)
      } else {
        setPassportPreview(null)
      }
    } else {
      setContractFile(file)
      if (file.type.startsWith('image/')) {
        const reader = new FileReader()
        reader.onload = (e) => setContractPreview(e.target?.result as string)
        reader.readAsDataURL(file)
      } else {
        setContractPreview(null)
      }
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
    handleFileUpload(type, file)
  }

  const handleFileUpload = async (type: 'passport' | 'contract', file: File) => {
    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
      if (type === 'passport') {
        setUploadingPassport(true)
      } else {
        setUploadingContract(true)
      }

      const formData = new FormData()
      formData.append('document', file)
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Ç–µ—Ä–∞
      const folderPath = type === 'passport' 
        ? 'director/masters/passport_doc'
        : 'director/masters/contract_doc'
      
      formData.append('folder', folderPath)

      const response = await fetch(`${config.apiUrl}/api/upload`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        },
        body: formData
      })

      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${response.status}`)
      }

      const data = await response.json()

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã —Å URL —Ñ–∞–π–ª–∞
      if (type === 'passport') {
        setFormData(prev => ({ ...prev, passportDoc: data.url }))
      } else {
        setFormData(prev => ({ ...prev, contractDoc: data.url }))
      }
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
      
      // –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
      if (type === 'passport') {
        setPassportFile(null)
        setPassportPreview(null)
      } else {
        setContractFile(null)
        setContractPreview(null)
      }
    } finally {
      // –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
      if (type === 'passport') {
        setUploadingPassport(false)
      } else {
        setUploadingContract(false)
      }
    }
  }

  const removeFile = (type: 'passport' | 'contract') => {
    if (type === 'passport') {
      setPassportFile(null)
      setPassportPreview(null)
      setFormData(prev => ({ ...prev, passportDoc: undefined }))
    } else {
      setContractFile(null)
      setContractPreview(null)
      setFormData(prev => ({ ...prev, contractDoc: undefined }))
    }
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>
            {master ? `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞: ${master.name}` : "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞"}
          </DialogTitle>
          <DialogDescription>
            {master ? "–ò–∑–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è" : "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞"}
          </DialogDescription>
          {(currentUser || user) && (
            <div className="mt-2 text-xs text-blue-600">
              –î–∏—Ä–µ–∫—Ç–æ—Ä: {(currentUser || user).name} ({(currentUser || user).cities?.join(', ') || '–ù–µ—Ç –≥–æ—Ä–æ–¥–æ–≤'})
            </div>
          )}
        </DialogHeader>

        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="info" className="flex items-center gap-2">
              <User className="w-4 h-4" />
              –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            </TabsTrigger>
            <TabsTrigger value="documents" className="flex items-center gap-2">
              <Files className="w-4 h-4" />
              –î–æ–∫—É–º–µ–Ω—Ç—ã
            </TabsTrigger>
          </TabsList>

          <TabsContent value="info" className="space-y-4 mt-4">
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="name">–ò–º—è –º–∞—Å—Ç–µ—Ä–∞ *</Label>
              <Input
                id="name"
                value={formData.name || ""}
                onChange={(e) => handleInputChange("name", e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –º–∞—Å—Ç–µ—Ä–∞"
                required
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="cities">–ì–æ—Ä–æ–¥–∞ *</Label>
              <div className="space-y-2">
                <p className="text-sm text-muted-foreground">
                  –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥–∞, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –º–∞—Å—Ç–µ—Ä (–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞: {availableCities.length})
                </p>
                {availableCities.length === 0 ? (
                  <div className="text-sm text-red-600 p-4 border border-red-200 rounded-md bg-red-50">
                    –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
                  </div>
                ) : (
                  <div className="space-y-2">
                    {/* –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º */}
                    <Select 
                      value={selectedCities.length > 0 ? selectedCities[0] : ""} 
                      onValueChange={(value) => {
                        if (!selectedCities.includes(value)) {
                          setSelectedCities([...selectedCities, value])
                        }
                      }}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è" />
                      </SelectTrigger>
                      <SelectContent>
                        {availableCities
                          .filter(city => !selectedCities.includes(city))
                          .map((city) => (
                            <SelectItem key={city} value={city}>
                              {city}
                            </SelectItem>
                          ))}
                      </SelectContent>
                    </Select>
                    
                    {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ */}
                    {selectedCities.length > 0 && (
                      <div className="space-y-2">
                        <div className="text-sm font-medium text-green-600">
                          –í—ã–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ ({selectedCities.length}):
                        </div>
                        <div className="flex flex-wrap gap-2">
                          {selectedCities.map((city) => (
                            <div
                              key={city}
                              className="flex items-center space-x-2 bg-primary text-primary-foreground px-3 py-1 rounded-full text-sm"
                            >
                              <span>{city}</span>
                              <button
                                type="button"
                                onClick={() => handleCityToggle(city)}
                                className="ml-1 hover:bg-primary-foreground/20 rounded-full p-0.5"
                              >
                                <X className="w-3 h-3" />
                              </button>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                )}
              </div>
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="statusWork">–°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã</Label>
            <Select value={formData.statusWork || "—Ä–∞–±–æ—Ç–∞–µ—Ç"} onValueChange={(value) => handleInputChange("statusWork", value)}>
              <SelectTrigger>
                <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="—Ä–∞–±–æ—Ç–∞–µ—Ç">–†–∞–±–æ—Ç–∞–µ—Ç</SelectItem>
                <SelectItem value="—É–≤–æ–ª–µ–Ω">–£–≤–æ–ª–µ–Ω</SelectItem>
                <SelectItem value="–≤ –æ—Ç–ø—É—Å–∫–µ">–í –æ—Ç–ø—É—Å–∫–µ</SelectItem>
                <SelectItem value="–±–æ–ª—å–Ω–∏—á–Ω—ã–π">–ë–æ–ª—å–Ω–∏—á–Ω—ã–π</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <Label htmlFor="note">–ó–∞–º–µ—Ç–∫–∏</Label>
            <Textarea
              id="note"
              value={formData.note || ""}
              onChange={(e) => handleInputChange("note", e.target.value)}
              placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Å—Ç–µ—Ä–µ"
              rows={3}
            />
          </div>

          {/* Telegram –ø–æ–ª—è */}
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="tgId">Telegram ID</Label>
              <Input
                id="tgId"
                value={formData.tgId || ""}
                onChange={(e) => handleInputChange("tgId", e.target.value)}
                placeholder="@username –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π ID"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="chatId">Chat ID</Label>
              <Input
                id="chatId"
                value={formData.chatId || ""}
                onChange={(e) => handleInputChange("chatId", e.target.value)}
                placeholder="–ß–∏—Å–ª–æ–≤–æ–π Chat ID"
              />
            </div>
          </div>
          </TabsContent>

          <TabsContent value="documents" className="space-y-4 mt-4">
          {/* –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ */}
          <div className="space-y-4">
            <Label className="text-base font-medium">–î–æ–∫—É–º–µ–Ω—Ç—ã</Label>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* –ü–∞—Å–ø–æ—Ä—Ç */}
              <div className="space-y-3">
                <Label className="text-sm font-medium">–ü–∞—Å–ø–æ—Ä—Ç</Label>
                
                {!passportFile ? (
                  <div className="relative border-2 border-dashed border-blue-300 rounded-lg p-4 transition-all duration-200 cursor-pointer hover:border-blue-400 hover:bg-blue-50/50">
                    <input
                      id="passport"
                      type="file"
                      accept=".pdf,.jpg,.jpeg,.png"
                      onChange={(e) => {
                        const file = e.target.files?.[0]
                        if (file) processFile('passport', file)
                      }}
                      className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                    />
                    <div className="text-center">
                      <div className="mx-auto w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center mb-3">
                        <Upload className="w-5 h-5 text-blue-600" />
                      </div>
                      <div className="space-y-1">
                        <p className="text-sm font-medium text-gray-900">
                          –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞—Å–ø–æ—Ä—Ç
                        </p>
                        <p className="text-xs text-gray-500">
                          PDF, JPG, PNG –¥–æ 5 –ú–ë
                        </p>
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className="border rounded-lg p-3 bg-white">
                    <div className="flex items-start space-x-3">
                      {passportPreview ? (
                        <div className="flex-shrink-0">
                          <img
                            src={passportPreview}
                            alt="–ü—Ä–µ–≤—å—é –ø–∞—Å–ø–æ—Ä—Ç–∞"
                            className="w-16 h-16 object-cover rounded-lg border"
                          />
                        </div>
                      ) : (
                        <div className="flex-shrink-0 w-16 h-16 bg-blue-100 rounded-lg flex items-center justify-center">
                          <FileText className="w-6 h-6 text-blue-600" />
                        </div>
                      )}

                      <div className="flex-1 min-w-0">
                        <div className="flex items-center space-x-2 mb-1">
                          {uploadingPassport ? (
                            <Loader2 className="w-4 h-4 text-blue-500 animate-spin" />
                          ) : (
                            <CheckCircle className="w-4 h-4 text-green-500" />
                          )}
                          <span className="text-sm font-medium text-gray-900 truncate">
                            {passportFile.name}
                          </span>
                        </div>
                        <p className="text-xs text-gray-500">
                          {(passportFile.size / 1024 / 1024).toFixed(2)} –ú–ë
                        </p>
                        <div className="mt-2">
                          <Button
                            type="button"
                            variant="outline"
                            size="sm"
                            onClick={() => removeFile('passport')}
                            className="text-red-600 border-red-200 hover:bg-red-50"
                            disabled={uploadingPassport}
                          >
                            <Trash2 className="w-3 h-3 mr-1" />
                            –£–¥–∞–ª–∏—Ç—å
                          </Button>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>

              {/* –î–æ–≥–æ–≤–æ—Ä */}
              <div className="space-y-3">
                <Label className="text-sm font-medium">–î–æ–≥–æ–≤–æ—Ä</Label>
                
                {!contractFile ? (
                  <div className="relative border-2 border-dashed border-green-300 rounded-lg p-4 transition-all duration-200 cursor-pointer hover:border-green-400 hover:bg-green-50/50">
                    <input
                      id="contract"
                      type="file"
                      accept=".pdf,.jpg,.jpeg,.png"
                      onChange={(e) => {
                        const file = e.target.files?.[0]
                        if (file) processFile('contract', file)
                      }}
                      className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                    />
                    <div className="text-center">
                      <div className="mx-auto w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center mb-3">
                        <Upload className="w-5 h-5 text-green-600" />
                      </div>
                      <div className="space-y-1">
                        <p className="text-sm font-medium text-gray-900">
                          –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä
                        </p>
                        <p className="text-xs text-gray-500">
                          PDF, JPG, PNG –¥–æ 5 –ú–ë
                        </p>
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className="border rounded-lg p-3 bg-white">
                    <div className="flex items-start space-x-3">
                      {contractPreview ? (
                        <div className="flex-shrink-0">
                          <img
                            src={contractPreview}
                            alt="–ü—Ä–µ–≤—å—é –¥–æ–≥–æ–≤–æ—Ä–∞"
                            className="w-16 h-16 object-cover rounded-lg border"
                          />
                        </div>
                      ) : (
                        <div className="flex-shrink-0 w-16 h-16 bg-green-100 rounded-lg flex items-center justify-center">
                          <FileText className="w-6 h-6 text-green-600" />
                        </div>
                      )}

                      <div className="flex-1 min-w-0">
                        <div className="flex items-center space-x-2 mb-1">
                          {uploadingContract ? (
                            <Loader2 className="w-4 h-4 text-green-500 animate-spin" />
                          ) : (
                            <CheckCircle className="w-4 h-4 text-green-500" />
                          )}
                          <span className="text-sm font-medium text-gray-900 truncate">
                            {contractFile.name}
                          </span>
                        </div>
                        <p className="text-xs text-gray-500">
                          {(contractFile.size / 1024 / 1024).toFixed(2)} –ú–ë
                        </p>
                        <div className="mt-2">
                          <Button
                            type="button"
                            variant="outline"
                            size="sm"
                            onClick={() => removeFile('contract')}
                            className="text-red-600 border-red-200 hover:bg-red-50"
                            disabled={uploadingContract}
                          >
                            <Trash2 className="w-3 h-3 mr-1" />
                            –£–¥–∞–ª–∏—Ç—å
                          </Button>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
          </TabsContent>
        </Tabs>

        <DialogFooter>
          <Button variant="outline" onClick={onClose}>
            <X className="w-4 h-4 mr-2" />
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button 
            onClick={handleSave} 
            disabled={!formData.name || selectedCities.length === 0 || availableCities.length === 0}
          >
            <Save className="w-4 h-4 mr-2" />
            {master ? "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" : "–î–æ–±–∞–≤–∏—Ç—å"}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}
