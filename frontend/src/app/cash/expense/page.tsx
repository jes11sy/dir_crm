"use client"

import { useState, useEffect } from "react"
import { ProtectedRoute } from "@/components/auth/protected-route"
import { Navigation } from "@/components/layout/navigation"
import { ExpenseForm } from "@/components/forms/expense-form"
import { CashHistoryTable } from "@/components/tables/cash-history-table"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Plus, Download, TrendingDown, Banknote } from "lucide-react"

interface ExpenseData {
  id: number
  name: string
  amount: number
  note?: string
  nameCreate: string
  dateCreate: string
}

export default function CashExpensePage() {
  const [expenses, setExpenses] = useState<ExpenseData[]>([])
  const [loading, setLoading] = useState(true)
  const [isFormOpen, setIsFormOpen] = useState(false)
  const [directorCities, setDirectorCities] = useState<string[]>([])
  const [directorName, setDirectorName] = useState<string>("–î–∏—Ä–µ–∫—Ç–æ—Ä")

  useEffect(() => {
    loadExpenses()
    loadDirectorInfo()
  }, [])

  const loadDirectorInfo = async () => {
    try {
      // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤ localStorage —Ö—Ä–∞–Ω–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–µ
      // –∏–ª–∏ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–≥–æ –≥–æ—Ä–æ–¥–æ–≤
      const response = await fetch('http://localhost:3002/api/auth/profile', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      })

      if (response.ok) {
        const userData = await response.json()
        console.log('üë§ –î–∞–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞:', userData)
        if (userData.user) {
          if (userData.user.cities) {
            setDirectorCities(userData.user.cities)
            console.log('üèôÔ∏è –ì–æ—Ä–æ–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞:', userData.user.cities)
          }
          if (userData.user.name) {
            setDirectorName(userData.user.name)
            console.log('üë§ –ò–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞:', userData.user.name)
          }
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–µ:', error)
      // Fallback –∫ —Ç–µ—Å—Ç–æ–≤—ã–º –≥–æ—Ä–æ–¥–∞–º
      setDirectorCities(['–ú–æ—Å–∫–≤–∞', '–°–ü–±', '–ö–∞–∑–∞–Ω—å'])
    }
  }

  const loadExpenses = async () => {
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã...')
      const response = await fetch('http://localhost:3002/api/cash?type=—Ä–∞—Å—Ö–æ–¥', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      })

      console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (—Ä–∞—Å—Ö–æ–¥—ã):', response.status, response.statusText)

      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤: ${response.status}`)
      }

      const data = await response.json()
      console.log('üì¶ –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–æ–≤:', data)
      setExpenses(data.operations || [])
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:", error)
      // Fallback –∫ —Ç–µ—Å—Ç–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º
      const mockExpenses: ExpenseData[] = [
        {
          id: 1,
          name: "—Ä–∞—Å—Ö–æ–¥",
          amount: 2000,
          note: "–ü–æ–∫—É–ø–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π",
          nameCreate: "–ê–¥–º–∏–Ω",
          dateCreate: "2024-01-15T09:00:00Z"
        },
        {
          id: 2,
          name: "—Ä–∞—Å—Ö–æ–¥",
          amount: 1500,
          note: "–û–ø–ª–∞—Ç–∞ –∞—Ä–µ–Ω–¥—ã",
          nameCreate: "–ê–¥–º–∏–Ω",
          dateCreate: "2024-01-14T14:30:00Z"
        }
      ]
      console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–æ–≤')
      setExpenses(mockExpenses)
    } finally {
      setLoading(false)
    }
  }

  const handleSaveExpense = async (expenseData: { amount: number, note: string, nameCreate: string, receiptDoc?: string }) => {
    try {
      const response = await fetch('http://localhost:3002/api/cash', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        },
        body: JSON.stringify({
          ...expenseData,
          name: '—Ä–∞—Å—Ö–æ–¥'
        })
      })

      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞: ${response.status}`)
      }

      const data = await response.json()
      setExpenses([...expenses, data.operation])
      setIsFormOpen(false)
      console.log("–†–∞—Å—Ö–æ–¥ —Å–æ–∑–¥–∞–Ω:", data.operation)
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞:", error)
    }
  }

  const handleExport = () => {
    console.log("–≠–∫—Å–ø–æ—Ä—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤")
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const totalExpenses = expenses.reduce((sum, expense) => sum + expense.amount, 0)
  const todayExpenses = expenses.filter(expense => {
    const today = new Date().toDateString()
    const expenseDate = new Date(expense.dateCreate).toDateString()
    return today === expenseDate
  }).reduce((sum, expense) => sum + expense.amount, 0)

  if (loading) {
    return (
      <ProtectedRoute>
        <div className="min-h-screen bg-background">
          <Navigation />
          <main className="container mx-auto p-6">
            <div className="flex items-center justify-center h-64">
              <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-primary"></div>
            </div>
          </main>
        </div>
      </ProtectedRoute>
    )
  }

  return (
    <ProtectedRoute>
      <div className="min-h-screen bg-background">
        <Navigation />
        
        <main className="container mx-auto p-6">
          <div className="grid gap-6">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">–í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤</CardTitle>
                  <TrendingDown className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">‚ÇΩ{totalExpenses}</div>
                  <p className="text-xs text-muted-foreground">–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è</p>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">–°–µ–≥–æ–¥–Ω—è</CardTitle>
                  <Banknote className="h-4 w-4 text-red-600" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold text-red-600">‚ÇΩ{todayExpenses}</div>
                  <p className="text-xs text-muted-foreground">–∑–∞ —Å–µ–≥–æ–¥–Ω—è</p>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">–û–ø–µ—Ä–∞—Ü–∏–π</CardTitle>
                  <span className="text-2xl font-bold">{expenses.length}</span>
                </CardHeader>
                <CardContent>
                  <p className="text-xs text-muted-foreground">–≤—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π</p>
                </CardContent>
              </Card>
            </div>

            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div>
                    <CardTitle className="flex items-center space-x-2">
                      <TrendingDown className="w-5 h-5" />
                      <span>–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤</span>
                    </CardTitle>
                    <CardDescription>
                      –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º
                    </CardDescription>
                  </div>
                  <div className="flex space-x-2">
                    <Button size="sm" onClick={() => setIsFormOpen(true)}>
                      <Plus className="w-4 h-4 mr-2" />
                      –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥
                    </Button>
                    <Button variant="outline" size="sm" onClick={handleExport}>
                      <Download className="w-4 h-4 mr-2" />
                      –≠–∫—Å–ø–æ—Ä—Ç
                    </Button>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <CashHistoryTable
                  operations={expenses}
                />
              </CardContent>
            </Card>
          </div>
        </main>

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞ */}
        <ExpenseForm
          isOpen={isFormOpen}
          onClose={() => setIsFormOpen(false)}
          onSubmit={handleSaveExpense}
          loading={false}
          directorCities={directorCities}
          directorName={directorName}
        />
      </div>
    </ProtectedRoute>
  )
}
