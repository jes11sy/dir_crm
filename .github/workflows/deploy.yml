name: 🚀 Deploy CRM System

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
    types: [ closed ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend

jobs:
  # Сборка и публикация Docker образов
  build-and-push:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    permissions:
      contents: read
      packages: write

    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata for Backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏷️ Extract metadata for Frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔨 Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}

      # Frontend Docker образ
      - name: 🔨 Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}

  # Деплой на production сервер
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    environment: production

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: 📋 Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: 🚀 Deploy to production server
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            set -e
            
            echo "🔄 Starting deployment process..."
            
            # Создание директории если её нет
            mkdir -p /opt/crm-system
            cd /opt/crm-system
            
            # Остановка всех сервисов (если есть)
            echo "🛑 Stopping services..."
            docker compose down 2>/dev/null || true
            
            # Хард ресет Docker (очистка кэша)
            echo "🧹 Hard reset Docker cache..."
            docker system prune -af --volumes
            docker builder prune -af
            
            # Логин в GitHub Container Registry
            echo "🔐 Logging into GitHub Container Registry..."
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Создание docker-compose.prod.yml
            echo "📝 Creating docker-compose.prod.yml..."
            cat > docker-compose.prod.yml << 'COMPOSE_EOF'
version: '3.8'

services:
  nginx:
    image: nginx:alpine
    container_name: crm-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - crm-network
    restart: unless-stopped

  frontend:
    image: ghcr.io/jes11sy/dir_crm/frontend:latest
    container_name: crm-frontend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://api.lead-schem.ru
      - NEXT_PUBLIC_APP_URL=https://lead-schem.ru
    networks:
      - crm-network
    restart: unless-stopped

  backend:
    image: ghcr.io/jes11sy/dir_crm/backend:latest
    container_name: crm-backend
    env_file:
      - .env.production
    volumes:
      - ./logs:/var/log/crm
      - ./uploads:/app/uploads
    networks:
      - crm-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: crm-redis
    command: redis-server --requirepass $${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - crm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: crm-postgres
    environment:
      - POSTGRES_DB=crm
      - POSTGRES_USER=$${DB_USER}
      - POSTGRES_PASSWORD=$${DB_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - crm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres-data:
  redis-data:

networks:
  crm-network:
    driver: bridge
COMPOSE_EOF
            
            # Создание .env файла из секретов GitHub
            echo "⚙️ Creating environment file..."
            cat > .env.production << EOL
          NODE_ENV=production
          
          # Database
          DATABASE_URL="${{ secrets.DATABASE_URL }}"
          
          # JWT
          JWT_SECRET="${{ secrets.JWT_SECRET }}"
          
          # Server
          PORT=3002
          FRONTEND_URL="https://lead-schem.ru"
          
          # Redis
          REDIS_URL="${{ secrets.REDIS_URL }}"
          REDIS_PASSWORD="${{ secrets.REDIS_PASSWORD }}"
          
          # S3 Storage
          S3_ENDPOINT="${{ secrets.S3_ENDPOINT }}"
          S3_REGION="${{ secrets.S3_REGION }}"
          S3_BUCKET="${{ secrets.S3_BUCKET }}"
          S3_ACCESS_KEY="${{ secrets.S3_ACCESS_KEY }}"
          S3_SECRET_KEY="${{ secrets.S3_SECRET_KEY }}"
          
          # Security
          BCRYPT_ROUNDS=12
          SESSION_SECRET="${{ secrets.SESSION_SECRET }}"
          
          # Rate Limiting
          RATE_LIMIT_WINDOW_MS=900000
          RATE_LIMIT_MAX_REQUESTS=100
          
          # Logging
          LOG_LEVEL=info
          LOG_FILE_PATH="/var/log/crm/app.log"
          EOL
            
            # Создание .env для frontend
            cat > frontend/.env.production << EOL
          NEXT_PUBLIC_API_URL=https://api.lead-schem.ru
          NEXT_PUBLIC_APP_URL=https://lead-schem.ru
          NEXT_PUBLIC_ENVIRONMENT=production
          NEXT_PUBLIC_ENABLE_ANALYTICS=true
          NEXT_PUBLIC_ENABLE_ERROR_REPORTING=true
          EOL
            
            # Создание необходимых директорий
            echo "📁 Creating directories..."
            mkdir -p logs nginx/ssl backups uploads
            
            # Создание nginx.conf
            echo "📝 Creating nginx.conf..."
            cat > nginx/nginx.conf << 'NGINX_EOF'
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    log_format main '$$remote_addr - $$remote_user [$$time_local] "$$request" '
                    '$$status $$body_bytes_sent "$$http_referer" '
                    '"$$http_user_agent" "$$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    
    sendfile on;
    tcp_nopush on;
    keepalive_timeout 65;
    gzip on;
    
    # Frontend
    server {
        listen 80;
        server_name lead-schem.ru www.lead-schem.ru;
        return 301 https://$$server_name$$request_uri;
    }
    
    server {
        listen 443 ssl http2;
        server_name lead-schem.ru www.lead-schem.ru;
        
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/private.key;
        
        location / {
            proxy_pass http://frontend:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $$http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $$host;
            proxy_cache_bypass $$http_upgrade;
        }
    }
    
    # Backend API
    server {
        listen 80;
        server_name api.lead-schem.ru;
        return 301 https://$$server_name$$request_uri;
    }
    
    server {
        listen 443 ssl http2;
        server_name api.lead-schem.ru;
        
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/private.key;
        
        location / {
            proxy_pass http://backend:3002;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $$http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $$host;
            proxy_cache_bypass $$http_upgrade;
            proxy_set_header X-Real-IP $$remote_addr;
            proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $$scheme;
        }
    }
}
NGINX_EOF
            
            # Создание SSL сертификатов (самоподписанные для начала)
            if [ ! -f nginx/ssl/cert.pem ]; then
              echo "🔒 Creating SSL certificates..."
              openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
                -keyout nginx/ssl/private.key \
                -out nginx/ssl/cert.pem \
                -subj "/C=RU/ST=Moscow/L=Moscow/O=CRM/CN=lead-schem.ru"
            fi
            
            # Запуск сервисов
            echo "▶️ Starting services..."
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d
            
            # Ожидание готовности сервисов
            echo "⏳ Waiting for services to be ready..."
            sleep 30
            
            # Проверка здоровья сервисов
            echo "🏥 Health check..."
            
            # Проверка backend
            for i in {1..10}; do
              if curl -f -s http://localhost:3002/api/health > /dev/null; then
                echo "✅ Backend is healthy"
                break
              fi
              if [ $i -eq 10 ]; then
                echo "❌ Backend health check failed"
                docker compose -f docker-compose.prod.yml logs backend
                exit 1
              fi
              sleep 10
            done
            
            # Проверка frontend
            for i in {1..10}; do
              if curl -f -s http://localhost:3000 > /dev/null; then
                echo "✅ Frontend is healthy"
                break
              fi
              if [ $i -eq 10 ]; then
                echo "❌ Frontend health check failed"
                docker compose -f docker-compose.prod.yml logs frontend
                exit 1
              fi
              sleep 10
            done
            
            # Очистка старых образов
            echo "🧹 Cleaning up old images..."
            docker image prune -f
            
            echo "🎉 Deployment completed successfully!"
            echo "📊 Service status:"
            docker compose -f docker-compose.prod.yml ps
          EOF

      - name: 🔔 Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment to production completed successfully!"
            echo "🌐 Frontend: https://lead-schem.ru"
            echo "🔗 Backend API: https://api.lead-schem.ru"
          else
            echo "❌ Deployment failed!"
          fi
