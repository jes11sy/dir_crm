name: üöÄ Deploy CRM System

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
    types: [ closed ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend

jobs:
  # –°–±–æ—Ä–∫–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è Docker –æ–±—Ä–∞–∑–æ–≤
  build-and-push:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    permissions:
      contents: read
      packages: write

    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîê Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üè∑Ô∏è Extract metadata for Backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: üè∑Ô∏è Extract metadata for Frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: üî® Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}

      - name: üî® Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          build-args: |
            NEXT_PUBLIC_API_URL=https://api.lead-schem.ru
            NEXT_PUBLIC_APP_URL=https://lead-schem.ru
            NEXT_PUBLIC_ENVIRONMENT=production
            NEXT_PUBLIC_ENABLE_ANALYTICS=true
            NEXT_PUBLIC_ENABLE_ERROR_REPORTING=true

  # –î–µ–ø–ª–æ–π –Ω–∞ production —Å–µ—Ä–≤–µ—Ä
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    environment: production

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîß Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: üìã Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: üì§ Copy configuration files to server
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "mkdir -p /opt/crm-system/nginx/ssl /opt/crm-system/logs /opt/crm-system/backups /opt/crm-system/uploads"
          scp docker-compose.prod.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/opt/crm-system/
          scp nginx/nginx.conf.template ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/opt/crm-system/nginx/nginx.conf
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "cp /etc/letsencrypt/live/lead-schem.ru/fullchain.pem /opt/crm-system/nginx/ssl/ && cp /etc/letsencrypt/live/lead-schem.ru/privkey.pem /opt/crm-system/nginx/ssl/ && chmod 644 /opt/crm-system/nginx/ssl/fullchain.pem && chmod 600 /opt/crm-system/nginx/ssl/privkey.pem && ls -la /opt/crm-system/nginx/ssl/"

      - name: üöÄ Deploy to production server
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          S3_ENDPOINT: ${{ secrets.S3_ENDPOINT }}
          S3_REGION: ${{ secrets.S3_REGION }}
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
          S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
          S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
          SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} \
            "GITHUB_TOKEN='${{ secrets.GITHUB_TOKEN }}' \
             GITHUB_ACTOR='${{ github.actor }}' \
             DATABASE_URL='${{ secrets.DATABASE_URL }}' \
             JWT_SECRET='${{ secrets.JWT_SECRET }}' \
             REDIS_URL='${{ secrets.REDIS_URL }}' \
             REDIS_PASSWORD='${{ secrets.REDIS_PASSWORD }}' \
             S3_ENDPOINT='${{ secrets.S3_ENDPOINT }}' \
             S3_REGION='${{ secrets.S3_REGION }}' \
             S3_BUCKET='${{ secrets.S3_BUCKET }}' \
             S3_ACCESS_KEY='${{ secrets.S3_ACCESS_KEY }}' \
             S3_SECRET_KEY='${{ secrets.S3_SECRET_KEY }}' \
             SESSION_SECRET='${{ secrets.SESSION_SECRET }}' \
             bash -s" << 'ENDSSH'
            set -e
            
            echo "üîÑ Starting deployment process..."
            
            cd /opt/crm-system
            
            # –ë—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π (–µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã)
            if docker compose ps 2>/dev/null | grep -q "Up"; then
              echo "üíæ Creating backup before deployment..."
              BACKUP_FILE="backups/backup-$(date +%Y%m%d-%H%M%S).tar.gz"
              tar -czf "$BACKUP_FILE" logs uploads 2>/dev/null || true
              echo "‚úÖ Backup created: $BACKUP_FILE"
            fi
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            echo "üõë Stopping services..."
            docker compose -f docker-compose.prod.yml down 2>/dev/null || true
            docker-compose -f docker-compose.prod.yml down 2>/dev/null || true
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å —ç—Ç–∏–º–∏ –∏–º–µ–Ω–∞–º–∏
            echo "üõë Force stopping CRM containers..."
            docker stop crm-nginx crm-backend crm-frontend crm-redis 2>/dev/null || true
            docker rm crm-nginx crm-backend crm-frontend crm-redis 2>/dev/null || true
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Docker (–ë–ï–ó volumes!)
            echo "üßπ Cleaning Docker cache (preserving volumes)..."
            docker container prune -f
            docker image prune -f
            docker network prune -f
            docker system prune -af
            docker builder prune -af
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ 80 –∏ 443
            echo "üîç Checking ports 80 and 443..."
            if lsof -Pi :80 -sTCP:LISTEN -t >/dev/null 2>&1; then
              echo "‚ö†Ô∏è Port 80 is in use, attempting to free..."
              fuser -k 80/tcp 2>/dev/null || true
            fi
            if lsof -Pi :443 -sTCP:LISTEN -t >/dev/null 2>&1; then
              echo "‚ö†Ô∏è Port 443 is in use, attempting to free..."
              fuser -k 443/tcp 2>/dev/null || true
            fi
            echo "‚úÖ Ports are ready"
            
            # –õ–æ–≥–∏–Ω –≤ GitHub Container Registry
            echo "üîê Logging into GitHub Container Registry..."
            echo "$GITHUB_TOKEN" | docker login ghcr.io -u "$GITHUB_ACTOR" --password-stdin
            
            # –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ GitHub
            echo "‚öôÔ∏è Creating environment file..."
            {
              echo "NODE_ENV=production"
              echo "DATABASE_URL=$DATABASE_URL"
              echo "JWT_SECRET=$JWT_SECRET"
              echo "PORT=3002"
              echo "FRONTEND_URL=https://lead-schem.ru"
              echo "REDIS_URL=redis://:defaultpassword@redis:6379"
              echo "REDIS_PASSWORD=defaultpassword"
              echo "S3_ENDPOINT=$S3_ENDPOINT"
              echo "S3_REGION=$S3_REGION"
              echo "S3_BUCKET=$S3_BUCKET"
              echo "S3_ACCESS_KEY=$S3_ACCESS_KEY"
              echo "S3_SECRET_KEY=$S3_SECRET_KEY"
              echo "BCRYPT_ROUNDS=12"
              echo "SESSION_SECRET=$SESSION_SECRET"
              echo "RATE_LIMIT_WINDOW_MS=900000"
              echo "RATE_LIMIT_MAX_REQUESTS=100"
              echo "LOG_LEVEL=info"
              echo "LOG_FILE_PATH=/var/log/crm/app.log"
            } > .env.production
            
            # –°–æ–∑–¥–∞–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ (—Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—á–∞–ª–∞)
            if [ ! -f nginx/ssl/cert.pem ]; then
              echo "üîí Creating self-signed SSL certificates..."
              echo "‚ö†Ô∏è  –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã (Let's Encrypt)!"
              openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
                -keyout nginx/ssl/private.key \
                -out nginx/ssl/cert.pem \
                -subj "/C=RU/ST=Moscow/L=Moscow/O=CRM/CN=lead-schem.ru"
            fi
            
            # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
            echo "‚ñ∂Ô∏è Starting services..."
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            echo "‚è≥ Waiting for backend container to start..."
            sleep 10
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –ë–î –ü–û–°–õ–ï –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            echo "üóÑÔ∏è Running database migrations..."
            if ! docker exec crm-backend npx prisma migrate deploy 2>&1 | tee /tmp/migrate.log; then
                if grep -q "P3005" /tmp/migrate.log; then
                  echo "‚ö†Ô∏è Database is not empty, using db push instead..."
                  docker exec crm-backend npx prisma db push --accept-data-loss || {
                    echo "‚ùå Database sync failed!"
                    exit 1
                  }
                  echo "‚úÖ Database schema synchronized"
                else
                  echo "‚ùå Database migration failed!"
                  cat /tmp/migrate.log
                  exit 1
                fi
            else
              echo "‚úÖ Migrations applied successfully"
            fi
            rm -f /tmp/migrate.log
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
            echo "‚è≥ Waiting for services to be ready..."
            sleep 20
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
            echo "üè• Health check..."
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ backend (–∫—Ä–∏—Ç–∏—á–Ω–æ)
            for i in {1..15}; do
              if docker exec crm-backend wget --no-verbose --tries=1 --spider http://localhost:3002/api/health 2>/dev/null; then
                echo "‚úÖ Backend is healthy"
                break
              fi
              if [ $i -eq 15 ]; then
                echo "‚ùå Backend health check failed"
                docker compose -f docker-compose.prod.yml logs backend
                exit 1
              fi
              echo "‚è≥ Waiting for backend... ($i/15)"
              sleep 5
            done
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend (–Ω–µ–∫—Ä–∏—Ç–∏—á–Ω–æ, —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ)
            echo "üîç Checking frontend status..."
            if docker exec crm-frontend wget --no-verbose --tries=1 --spider http://localhost:3000 2>/dev/null; then
              echo "‚úÖ Frontend is healthy"
            else
              echo "‚ö†Ô∏è Frontend not responding yet (will start shortly)"
              docker compose -f docker-compose.prod.yml logs frontend --tail 20
            fi
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ nginx –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
            echo "üîÑ Reloading nginx..."
            docker compose -f docker-compose.prod.yml restart nginx
            sleep 5
            echo "‚úÖ Nginx reloaded"
            
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤
            echo "üßπ Cleaning up old images..."
            docker image prune -f
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ
            echo "üíæ Disk usage:"
            df -h /opt/crm-system
            
            echo "üéâ Deployment completed successfully!"
            echo "üìä Service status:"
            docker compose -f docker-compose.prod.yml ps
          ENDSSH

      - name: üîî Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Deployment to production completed successfully!"
            echo "üåê Frontend: https://lead-schem.ru"
            echo "üîó Backend API: https://api.lead-schem.ru"
          else
            echo "‚ùå Deployment failed!"
            echo "üí° Check the logs above for details"
          fi