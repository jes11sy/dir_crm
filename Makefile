# CRM Project Makefile

.PHONY: help install build start stop restart logs clean deploy backup restore test

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
BLUE := \033[0;34m
GREEN := \033[0;32m
YELLOW := \033[1;33m
NC := \033[0m

help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
	@echo "$(BLUE)CRM Project Commands:$(NC)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(GREEN)%-20s$(NC) %s\n", $$1, $$2}'

# Development commands
install: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
	@echo "$(BLUE)–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	cd backend && npm install
	cd frontend && npm install

dev-backend: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å backend –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(BLUE)–ó–∞–ø—É—Å–∫ backend –≤ dev —Ä–µ–∂–∏–º–µ...$(NC)"
	cd backend && npm run dev

dev-frontend: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å frontend –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(BLUE)–ó–∞–ø—É—Å–∫ frontend –≤ dev —Ä–µ–∂–∏–º–µ...$(NC)"
	cd frontend && npm run dev

dev: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±–∞ —Å–µ—Ä–≤–∏—Å–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(BLUE)–ó–∞–ø—É—Å–∫ –≤ dev —Ä–µ–∂–∏–º–µ...$(NC)"
	make -j2 dev-backend dev-frontend

# Docker commands
build: ## –°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑—ã
	@echo "$(BLUE)–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤...$(NC)"
	docker build -t crm-backend:latest ./backend
	docker build -t crm-frontend:latest ./frontend

start: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å production –æ–∫—Ä—É–∂–µ–Ω–∏–µ
	@echo "$(BLUE)–ó–∞–ø—É—Å–∫ production –æ–∫—Ä—É–∂–µ–Ω–∏—è...$(NC)"
	docker-compose -f docker-compose.prod.yml up -d

stop: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
	@echo "$(BLUE)–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	docker-compose -f docker-compose.prod.yml down

restart: ## –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
	@echo "$(BLUE)–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	make stop
	make start

logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	docker-compose -f docker-compose.prod.yml logs -f

logs-backend: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ backend
	docker-compose -f docker-compose.prod.yml logs -f backend

logs-frontend: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ frontend
	docker-compose -f docker-compose.prod.yml logs -f frontend

logs-nginx: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ nginx
	docker-compose -f docker-compose.prod.yml logs -f nginx

# Database commands
migrate: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	@echo "$(BLUE)–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π...$(NC)"
	docker-compose -f docker-compose.prod.yml run --rm backend npm run migrate:deploy

migrate-dev: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ dev —Ä–µ–∂–∏–º–µ
	@echo "$(BLUE)–ó–∞–ø—É—Å–∫ dev –º–∏–≥—Ä–∞—Ü–∏–π...$(NC)"
	cd backend && npm run migrate:dev

seed: ## –ó–∞–ø–æ–ª–Ω–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
	@echo "$(BLUE)–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ë–î —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...$(NC)"
	docker-compose -f docker-compose.prod.yml run --rm backend npm run seed

# Backup and restore
backup: ## –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	@echo "$(BLUE)–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞...$(NC)"
	chmod +x scripts/backup.sh
	./scripts/backup.sh

restore: ## –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±—ç–∫–∞–ø–∞
	@echo "$(YELLOW)–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make restore BACKUP=path/to/backup.sql.gz$(NC)"
	@if [ -z "$(BACKUP)" ]; then \
		echo "$(YELLOW)–£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞: make restore BACKUP=./backups/backup.sql.gz$(NC)"; \
		exit 1; \
	fi
	chmod +x scripts/restore.sh
	./scripts/restore.sh $(BACKUP)

# Deployment
deploy: ## –î–µ–ø–ª–æ–π –≤ production
	@echo "$(BLUE)–î–µ–ø–ª–æ–π –≤ production...$(NC)"
	chmod +x scripts/deploy.sh
	./scripts/deploy.sh production

deploy-staging: ## –î–µ–ø–ª–æ–π –≤ staging
	@echo "$(BLUE)–î–µ–ø–ª–æ–π –≤ staging...$(NC)"
	chmod +x scripts/deploy.sh
	./scripts/deploy.sh staging

# Testing
test: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
	@echo "$(BLUE)–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...$(NC)"
	cd backend && npm test
	cd frontend && npm test

test-backend: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã backend
	cd backend && npm test

test-frontend: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã frontend
	cd frontend && npm test

# Maintenance
clean: ## –û—á–∏—Å—Ç–∏—Ç—å Docker —Ä–µ—Å—É—Ä—Å—ã
	@echo "$(BLUE)–û—á–∏—Å—Ç–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤...$(NC)"
	docker system prune -f
	docker volume prune -f
	docker image prune -f

clean-all: ## –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Docker (–û–°–¢–û–†–û–ñ–ù–û!)
	@echo "$(YELLOW)–í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï Docker –¥–∞–Ω–Ω—ã–µ!$(NC)"
	@read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " confirm && [ "$$confirm" = "y" ]
	docker system prune -a -f --volumes

status: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(BLUE)–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:$(NC)"
	docker-compose -f docker-compose.prod.yml ps

health: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(BLUE)–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	@echo "Backend Health:"
	@curl -s http://localhost:3002/api/health || echo "Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
	@echo ""
	@echo "Frontend Health:"
	@curl -s http://localhost:3000 > /dev/null && echo "Frontend —Ä–∞–±–æ—Ç–∞–µ—Ç" || echo "Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

# SSL
ssl-cert: ## –°–æ–∑–¥–∞—Ç—å —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(BLUE)–°–æ–∑–¥–∞–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞...$(NC)"
	mkdir -p nginx/ssl
	openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
		-keyout nginx/ssl/private.key \
		-out nginx/ssl/cert.pem \
		-subj "/C=RU/ST=Moscow/L=Moscow/O=CRM/CN=localhost"

# Environment setup
setup-env: ## –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∞–π–ª—ã –æ–∫—Ä—É–∂–µ–Ω–∏—è
	@echo "$(BLUE)–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...$(NC)"
	@if [ ! -f .env.production ]; then \
		cp backend/env.production.example .env.production; \
		echo "$(GREEN)–°–æ–∑–¥–∞–Ω .env.production –∏–∑ —à–∞–±–ª–æ–Ω–∞$(NC)"; \
		echo "$(YELLOW)–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!$(NC)"; \
	fi
	@if [ ! -f .env.staging ]; then \
		cp backend/env.production.example .env.staging; \
		echo "$(GREEN)–°–æ–∑–¥–∞–Ω .env.staging –∏–∑ —à–∞–±–ª–æ–Ω–∞$(NC)"; \
	fi

# Quick start
quick-start: setup-env ssl-cert build start ## –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç (–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ + —Å–±–æ—Ä–∫–∞ + –∑–∞–ø—É—Å–∫)
	@echo "$(GREEN)üéâ CRM –∑–∞–ø—É—â–µ–Ω!$(NC)"
	@echo "$(BLUE)Frontend: http://localhost:3000$(NC)"
	@echo "$(BLUE)Backend API: http://localhost:3002$(NC)"
	@echo "$(YELLOW)–ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env.production$(NC)"
